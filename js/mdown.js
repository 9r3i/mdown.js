/**
 * mdown.js
 * ~ mdown theme for website and blog
 * authored by 9r3i
 * https://github.com/9r3i/mdown.js
 * started at november 22nd 2023
 * requires: 
 *   - virtual.js - https://github.com/9r3i/virtual.js - v1.1.0
 *   - gaino.js   - https://github.com/9r3i/gaino.js   - v1.3.1
 *   - router.js  - https://github.com/9r3i/router.js  - v2.2.1
 *   - parser.js  - https://github.com/9r3i/parser.js  - v1.2.6
 *   - blog.js    - https://github.com/9r3i/blog.js    - v1.2.1
 *   - global variables:
 *       - _GLOBAL = object; generated by router.js
 *       - _BLOG   = object of blog; generated by blog.js 
 *       - _ENV    = object (dynamic); generated by router.js
 *       - _FUNC   = object of functions; generated by router.js
 *       - _GET    = object (dynamic); generated by router.js
 *   - all requires are provided by blog.js for auto-load
 * - plain.helper.js - https://github.com/9r3i/plain.js - v1.1.0
 * - showdown.js - https://github.com/showdownjs/showdown - v2.1.0
 */


/* start the theme */
new MDown;


/**
 * MDown
 * basic caller
 */
;function MDown(){
this.version='1.2.0';
this.init=async function(){

if(typeof _GLOBAL==='undefined'
  ||typeof _BLOG==='undefined'
  ){
  return alert('Error: Requires gaino blog.');
}

/* set global site */
_GLOBAL.site={
  name:document.querySelector('title').textContent,
  description:document
    .querySelector('meta[name="description"]').content,
  across:_BLOG.config.hasOwnProperty('across')
    ?_BLOG.config.across:false,
};

/* prepare global posts -- release method */
_GLOBAL.posts={};
if(_BLOG.db.config.host=='https://api.github.com/repos'){
  _GLOBAL.posts=(new PlainHelper).dataPosts(_GLOBAL.data);
}else{
  /* prepare global posts -- default */
  _GLOBAL.posts=_GLOBAL.data;
}
_GLOBAL.total=Object.keys(_GLOBAL.data).length;

/* prepare tags */
_GLOBAL.tags=(new PlainHelper).tags(_GLOBAL.posts);

/* prepare lang for locale */
_GLOBAL.langSet=function(lang){
  _BLOG.virtual.put('locale.lang',lang);
  return lang||'en';
};
_GLOBAL.langGet=function(){
  let lang=_BLOG.virtual.get('locale.lang');
  return lang||'en';
};

/**
 * adding route
 * ~ dynamic global environment
 * @global: (dynamic)
 *   --> _ROUTER = object of active router
 *   --> _GET    = object of query _GET of request URI
 *   --> _FUNC   = object of given functions
 *   --> _ENV    = object of given environments
 * @parameters:
 *   path              = string of path
 *   title             = string of title
 *   content           = string of content template
 *   content_selector  = string of content selector to put into
 *   functions         = object with function name as key
 *                       and string function content to eval
 *   environment       = object
 * @return: pushing to router.routes
 */
_BLOG.route.add(
  /* path */
  '',
  /* title */
  'Home',
  /* content */
  _GLOBAL.templates.main,
  /* content selector */
  'body',
  /* functions */
  {
    footer:_GLOBAL.templates.footer,
  },
  /* environment */
  new MDownTheme
);
};
return this.init();
}; /*===[end of plain]===*/


/**
 * mdown theme
 * ~ cloned from plain theme
 * object _ENV
 */
;function MDownTheme(){
  this.version='1.2.0';
  return {
    detail:function(){
      if(_GET.hasOwnProperty('tag')){
        return 'Total: '+_ENV.tagCount()+' posts';
      }else if(_GET.hasOwnProperty('recent')){
        return 'Total: '+_GLOBAL.total+' posts';
      }else if(_GET.hasOwnProperty('search')){
        return 'Total: '+_ENV.searchCount()+' posts';
      }else if(_GET.hasOwnProperty('reload')){
        return '';
      }else if(_GET.hasOwnProperty('test')){
        return 'Testing...';
      }else if(_GET.hasOwnProperty('admin')){
        return 'Admin Page';
      }else if(!_GET.hasOwnProperty('id')){
        //return 'Total: '+_GLOBAL.tags.total+' tags';
        return ' ';
      }
      let post=_GLOBAL.posts[_GET.id]
        ?_GLOBAL.posts[_GET.id]:false;
      if(!post){
        return 'Error: Failed to patch post.detail.';
      }
      let tdate=new Date(post.time).toString().substr(0,21),
      base='https://github.com/'
        +_BLOG.config.database.username
        +'/'
        +_BLOG.config.database.name
        +'/releases/tag/',
      tagURL=base+post.tag;
      return '<table class="post-detail-table">'
        +'<tbody><tr><td>'
        +'<img src="'+post.authorPicture+'" alt="'
        +post.author+'" />'
        +'</td><td>'
        +'Published at <i>'+tdate+'</i>\n'
        +'Authored by <a href="'
        +post.authorURL+'" target="_blank">'
        +post.author+'</a>\n'
        +'Original post at <a href="'+tagURL
        +'" target="_blank">'+post.tag+'</a>'
        +''
        +'</td></tr></tbody></table>';
    },
    title:function(){
      let text='Error: Not Found.';
      if(_GET.hasOwnProperty('tag')){
        text='#'+_GET.tag;
        _BLOG.route.title(text);
      }else if(_GET.hasOwnProperty('recent')){
        text='Recent Posts';
      }else if(_GET.hasOwnProperty('search')){
        text='Search'+(_GET.search==''?'':': '+_GET.search);
      }else if(_GET.hasOwnProperty('reload')){
        return 'Reloading...';
      }else if(_GET.hasOwnProperty('test')){
        return 'Testing...';
      }else if(_GET.hasOwnProperty('admin')){
        return _ENV.isLogin()?'Admin':'Login';
      }else if(!_GET.hasOwnProperty('id')){
        text=_GLOBAL.site.description;
      }else{
        text=_GLOBAL.posts[_GET.id]
          ?_GLOBAL.posts[_GET.id].title
          :'Error: Post is not available.';
      }
      _BLOG.route.title(text);
      return text;
    },
    content:function(){
      if(_GET.hasOwnProperty('tag')){
        return _ENV.tag();
      }else if(_GET.hasOwnProperty('search')){
        return _ENV.search();
      }else if(_GET.hasOwnProperty('recent')){
        return _ENV.main();
      }else if(_GET.hasOwnProperty('reload')){
        return '<progress></progress>';
      }else if(_GET.hasOwnProperty('test')){
        _ENV.testing();
        return 'Testing...';
      }else if(_GET.hasOwnProperty('admin')){
        let token=_BLOG.virtual.get('token.reg');
        if(_GET.admin=='logout'){
          _BLOG.virtual.delete('token.reg');
          _BLOG.route.go('?admin');
        }else if(token){
          setTimeout(async function(){
            return await _ENV.admin(token);
          },100);
          return '';
        }return _GLOBAL.templates.login;
      }else if(!_GET.hasOwnProperty('id')){
        let helper=new PlainHelper,
        tagName=_BLOG.config.theme.mainTagName,
        content=_GLOBAL.mainPosts.hasOwnProperty(tagName)
          ?_GLOBAL.mainPosts[tagName].content
          :'Found nothing in tag "'+tagName+'".';
        setTimeout(()=>{
          let each=document.getElementsByClassName('tags-each'),
          detail=document.querySelector('.post-detail');
          _ENV.tagsEachShow(each,detail);
        },500);
        return '<div>'+_GLOBAL.tags.html+'</div>'
          +'<div class="post-home-content">'
          +helper.contentLink(content)
          +'</div>';
      }
      let post=_GLOBAL.posts[_GET.id]
        ?_GLOBAL.posts[_GET.id]:false;
      if(!post){
        return 'Error: Post is not available.\n\n'
          +'<a href="'+_BLOG.route.baseurl+'">'
          +'[Back Home]'
          +'</a>';
      }
      let helper=new PlainHelper,
      converter=new showdown.Converter(),
      content=helper.contentLink(post.content,post.assets);
      if(_BLOG.config.theme.show_assets){
        content+=helper.assetsList(post.assets);
      }
      content=helper.contentFindTags(content);
      content=converter.makeHtml(content);
      return content;
    },
    tagsEachShow:function(each,detail,i){
      i=i?i:0;
      if(!each[i]){return false;}
      if(detail){
        detail.innerText='Total: '+(i+1)+' tag'+(i>0?'s':'');
      }
      each[i].classList.add('tags-each-show');
      setTimeout(()=>{
        _ENV.tagsEachShow(each,detail,i+1);
      },100);
    },
    isLogin:function(){
      let token=_BLOG.virtual.get('token.reg');
      return token?true:false;
    },
    admin:async function(token){
      let button=document.createElement('input'),
      pc=document.querySelector('div[class="post-content"]');
      _BLOG.db.options.headers=(new PlainHelper).headers(token);
      button.type='submit';
      button.value='Logout';
      button.classList.add('button-logout');
      button.onclick=function(e){
        return _BLOG.route.go('?admin=logout');
      };
      pc.innerText='hooray! login...\n\n'+token+'\n\n';
      pc.appendChild(button);
    },
    login:async function(submit){
      let parent=submit.parentNode,
      regToken=_BLOG.virtual.get('token.reg'),
      token=document.querySelector('input[name="token"]');
      token.disabled=true;
      submit.disabled=true;
      submit.value='Connecting...';
      /* testing token */
      _BLOG.db.options.headers=
        (new PlainHelper).headers(token.value);
      let res=await _BLOG.db.request('posts');
      if(res&&typeof res==='object'&&res[0]
        &&res[0].hasOwnProperty('id')
        &&res[0].hasOwnProperty('tag_name')
        ){
        _BLOG.virtual.put('token.reg',token.value);
        return await _ENV.admin(token.value);
      }
      token.disabled=false;
      submit.disabled=false;
      submit.value='Connect';
      prompt('Error: Invalid token.',JSON.stringify(res));
      return '[this is _ENV.login()]';
    },
    search:function(){
      let tagName=_GET.hasOwnProperty('search')?_GET.search:'',
      res='<input class="search-input" type="text" '
        +'value="'+tagName+'" id="search-input" '
        +'placeholder="Search..." />\n\n',
      keys=Object.keys(_GLOBAL.posts).reverse();
      if(tagName==''){
        res+='<div id="search-result"></div>';
        return res;
      }
      res+='<div id="search-result">';
      for(let id of keys){
        let post=_GLOBAL.posts[id],
        akut=post.title.match(new RegExp(tagName,'ig')),
        akur=post.content.match(new RegExp(tagName,'ig'));
        if(akut||akur){
          res+='<div class="post-each">'
            +'<a href="?id='+id+'">'
            +post.title+'</a></div>';
        }
      }
      res+='</div>';
      return res;
    },
    searchCount:function(){
      let res=0,
      tagName=_GET.hasOwnProperty('search')?_GET.search:'',
      keys=Object.keys(_GLOBAL.posts).reverse();
      for(let id of keys){
        let post=_GLOBAL.posts[id],
        akut=post.title.match(new RegExp(tagName,'ig')),
        akur=post.content.match(new RegExp(tagName,'ig'));
        if(akut||akur){
          res++;
        }
      }
      return res;
    },
    tag:function(){
      let res='',
      tagName=_GET.hasOwnProperty('tag')?_GET.tag:'',
      keys=Object.keys(_GLOBAL.posts).reverse();
      for(let id of keys){
        let post=_GLOBAL.posts[id],
        akur=post.content.match(new RegExp('#'+tagName,'ig'));
        if(!akur){
          continue;
        }
        res+='<div class="post-each">'
          +'<a href="?id='+id+'">'
          +post.title+'</a></div>';
      }
      return res;
    },
    tagCount:function(){
      let res=0,
      tagName=_GET.hasOwnProperty('tag')?_GET.tag:'',
      keys=Object.keys(_GLOBAL.posts).reverse();
      for(let id of keys){
        let post=_GLOBAL.posts[id],
        akur=post.content.match(new RegExp('#'+tagName,'ig'));
        if(!akur){
          continue;
        }res++;
      }
      return res;
    },
    main:function(){
      let res='',
      page=_GET.hasOwnProperty('page')?parseInt(_GET.page):1,
      limit=10,
      count=0,
      start=0+((page-1)*limit),
      keys=Object.keys(_GLOBAL.posts).reverse();
      for(let i=start;i<keys.length;i++){
        let id=keys[i],
        post=_GLOBAL.posts[id];
        res+='<div class="post-each">'
          +'<a href="?id='+id+'">'
          +post.title+'</a></div>';
        count++;
        if(count>=limit){
          break;
        }
      }
      res+='\n\n<div class="post-each">';
      if(page>1){
        res+='<a href="?recent&page='+(page-1)+'">[Previous]</a>  ';
      }
      if(count>=limit){
        res+='<a href="?recent&page='+(page+1)+'">[Next]</a>  ';
      }
      res+='</div>';
      return res;
    },
    query:function(){
      let parse=new parser,
      url=location.pathname+location.search,
      parsed=parse.parseURL(url);
      return parse.likeJSON({url,parsed},5);
    },
    print:function(){
      let parse=new parser;
      return parse.likeJSON(...arguments);
    },
    post:function(){
      let res={},
      id=_GET.hasOwnProperty('id')?_GET.id:'';
      if(_GLOBAL.posts.hasOwnProperty(id)){
        res=_GLOBAL.posts[id];
      }return res;
    },
    testing:function(){
      let parse=new parser,
      res=[];
      _BLOG.gaino.fetch('/eva/api/eva.php',{
      //fetch('/eva/api/eva.php',{
        method:'PUT',
        headers:{
          'Content-Type': 'application/json',
          'Accept': 'application/vnd.eva+json',
          //'Accept': 'text/plain',
          'Authorization': 'Bearer kYu9IhbKoUn-9ig7gz',
          'X-Eva-Api-Version': '2023-11-29',
        },
        body:{
          test: 'testing aja',
          tos: 'never ending story'
        },
      }).then(r=>{
        document.body.innerHTML='<div>'
          +parse.likeJSON(_BLOG.gaino.parseJSON(r),5)+'</div>';
      }).catch(e=>alert(e));
      return '';
    },
  }
};





